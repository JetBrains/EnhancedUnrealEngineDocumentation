name: Build EnhancedUnrealEngineDocumentation
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [main]
  # Trigger the workflow on any pull request
  pull_request:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0
        with:
          submodules: 'recursive'

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.4

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Set environment variables
#       - name: Export Properties
#         id: properties
#         shell: bash
#         run: |
#           PROPERTIES="$(./gradlew properties --console=plain -q)"
#           VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
#           NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
#           CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
#           CHANGELOG="${CHANGELOG//'%'/'%25'}"
#           CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
#           CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

#           echo "::set-output name=version::$VERSION"
#           echo "::set-output name=name::$NAME"
#           echo "::set-output name=changelog::$CHANGELOG"
#           echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"

#           ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Make dotnet.cmd executable
        run: chmod +x ./tools/dotnet.cmd
      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin -PbuildConfiguration=Release

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "::set-output name=filename::$FILENAME"

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
